{
  "version": 3,
  "sources": ["../../../../../node_modules/uniapp-zaudio/dist/util.js", "../../../../../node_modules/uniapp-zaudio/dist/zaudio.js", "../../../../../node_modules/uniapp-zaudio/index.js"],
  "sourcesContent": ["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.EventBus = exports.throttle = exports.formatSeconds = void 0;\r\nfunction formatSeconds(seconds) {\r\n    var result = typeof seconds === \"string\" ? parseFloat(seconds) : seconds;\r\n    if (isNaN(result))\r\n        return \"\";\r\n    let h = Math.floor(result / 3600) < 10\r\n        ? \"0\" + Math.floor(result / 3600)\r\n        : Math.floor(result / 3600);\r\n    let m = Math.floor((result / 60) % 60) < 10\r\n        ? \"0\" + Math.floor((result / 60) % 60)\r\n        : Math.floor((result / 60) % 60) + h * 60;\r\n    let s = Math.floor(result % 60) < 10\r\n        ? \"0\" + Math.floor(result % 60)\r\n        : Math.floor(result % 60);\r\n    return `${m}:${s}`;\r\n}\r\nexports.formatSeconds = formatSeconds;\r\nfunction throttle(fn, wait) {\r\n    let previous = 0;\r\n    return function (...arg) {\r\n        let context = this;\r\n        let now = Date.now();\r\n        //每隔一段时间执行一次；\r\n        if (now - previous > wait) {\r\n            fn.apply(context, arg);\r\n            previous = now;\r\n        }\r\n    };\r\n}\r\nexports.throttle = throttle;\r\nclass EventBus {\r\n    constructor() {\r\n        this._events = new Map();\r\n    }\r\n    on(event, action, fn) {\r\n        let arr = this._events.get(event);\r\n        let hasAction = arr\r\n            ? arr.findIndex((i) => i.action == action)\r\n            : -1;\r\n        if (hasAction > -1) {\r\n            return;\r\n        }\r\n        this._events.set(event, [\r\n            ...(this._events.get(event) || []),\r\n            {\r\n                action,\r\n                fn,\r\n            },\r\n        ]);\r\n    }\r\n    has(event) {\r\n        return this._events.has(event);\r\n    }\r\n    emit(event, data) {\r\n        if (!this.has(event)) {\r\n            return;\r\n        }\r\n        let arr = this._events.get(event);\r\n        arr.forEach((i) => {\r\n            i.fn(data);\r\n        });\r\n    }\r\n    off(event, action) {\r\n        if (!this.has(event)) {\r\n            return;\r\n        }\r\n        let arr = this._events.get(event);\r\n        let newdata = arr.filter((i) => i.action !== action);\r\n        this._events.set(event, [...newdata]);\r\n    }\r\n}\r\nexports.EventBus = EventBus;\r\n", "\"use strict\";\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nvar zaudioCbName;\r\n(function (zaudioCbName) {\r\n    zaudioCbName[\"onWaiting\"] = \"waiting\";\r\n    zaudioCbName[\"onError\"] = \"error\";\r\n    zaudioCbName[\"onTimeUpdate\"] = \"playing\";\r\n    zaudioCbName[\"onCanplay\"] = \"canPlay\";\r\n    zaudioCbName[\"onPause\"] = \"pause\";\r\n    zaudioCbName[\"onEnded\"] = \"ended\";\r\n    zaudioCbName[\"setAudio\"] = \"setAudio\";\r\n    zaudioCbName[\"updateAudio\"] = \"updateAudio\";\r\n    zaudioCbName[\"seek\"] = \"seek\";\r\n    zaudioCbName[\"onStop\"] = \"stop\";\r\n    zaudioCbName[\"syncStateOn\"] = \"syncStateOn\";\r\n})(zaudioCbName || (zaudioCbName = {}));\r\nlet zaudioCbNameArr = [];\r\nfor (const key in zaudioCbName) {\r\n    if (Object.prototype.hasOwnProperty.call(zaudioCbName, key)) {\r\n        const item = zaudioCbName[key];\r\n        zaudioCbNameArr.push(item);\r\n    }\r\n}\r\nconst util_1 = require(\"./util\");\r\n/**\r\n * ZAudio类\r\n * @class ZAudio\r\n * @constructor\r\n * @param    {String}    defaultCover    音频默认封面\r\n * @param    {Boolean}   continuePlay    继续播放,错误播放或结束播放后执行\r\n * @param    {Boolean}   autoPlay        自动播放,部分浏览器不支持\r\n * @property {Number}         renderIndex     当前渲染索引\r\n * @property {<audioinfo>}      renderinfo      当前渲染数据\r\n * @property {Array<audio>}   audiolist       音频列表数组\r\n * @property {<audioinfo>}      playinfo        当前播放数据\r\n * @property {Boolean}        paused          音频暂停状态\r\n * @property {Number}         playIndex       当前播放索引\r\n * @property {Boolean}        renderIsPlay    渲染与播放是否一致\r\n *\r\n * @method on(event, action, fn)       回调函数注册业务事件\r\n * @method off(event, action)          回调函数中卸载业务事件\r\n * @method setRender(data)             指定音频, 渲染到zaudio组件\r\n * @method syncRender()    \t\t\t\t\t\t 同步并渲染当前的播放状态\r\n * @method operate(index)       \t\t\t 播放或暂停指定索引的音频\r\n * @method setAudio(list)\t\t   \t\t\t\t 覆盖音频列表\r\n * @method updateAudio(list)   \t\t\t\t 添加音频列表\r\n * @method stop()          \t\t\t\t\t\t 强制暂停当前播放音频\r\n * @method stepPlay(count)      \t\t\t\t快进快退\r\n * @method syncStateOn(action, cb)       \t注册一个用于同步获取当前播放状态的事件\r\n * @method syncStateOff(action)     \t\t卸载用于同步获取当前播放状态的事件\r\n *\r\n *\r\n * **/\r\nclass ZAudio extends util_1.EventBus {\r\n    constructor(options) {\r\n        super();\r\n        this.loading = false;\r\n        this.renderIndex = 0;\r\n        this.audiolist = [];\r\n        this.renderinfo = {\r\n            current: \"00:00\",\r\n            duration: \"00:00\",\r\n            duration_value: 0,\r\n            current_value: 0,\r\n            src: \"\",\r\n            title: \"\",\r\n            singer: \"\",\r\n            coverImgUrl: \"\",\r\n        };\r\n        this.playinfo = {\r\n            current: \"00:00\",\r\n            duration: \"00:00\",\r\n            duration_value: 0,\r\n            current_value: 0,\r\n            src: \"\",\r\n            title: \"\",\r\n            singer: \"\",\r\n            coverImgUrl: \"\",\r\n        };\r\n        this.paused = true;\r\n        this.uPause = false;\r\n        this.autoPlay = false;\r\n        this.defaultCover = \"\";\r\n        this.continuePlay = true;\r\n        //fix: 防抖触发音频播放中事件\r\n        this.throttlePlaying = util_1.throttle(() => {\r\n            this.emit(zaudioCbName.onTimeUpdate, this.playinfo);\r\n            this.syncStateEmit();\r\n        }, 1000);\r\n        let { defaultCover, autoPlay, continuePlay } = options;\r\n        this.defaultCover = defaultCover;\r\n        this.autoPlay = autoPlay;\r\n        this.continuePlay = continuePlay;\r\n        this.init();\r\n    }\r\n    init() {\r\n\r\n\r\n\r\n\r\n        var audioCtx = uni.createInnerAudioContext();\r\n        audioCtx.autoplay = this.autoPlay;\r\n\r\n        this.audioCtx = audioCtx;\r\n        this.audioCtx.onWaiting(this.onWaitingHandler.bind(this));\r\n        this.audioCtx.onCanplay(this.onCanplayHandler.bind(this));\r\n        this.audioCtx.onPlay(this.onPlayHandler.bind(this));\r\n        this.audioCtx.onPause(this.onPauseHandler.bind(this));\r\n        this.audioCtx.onStop(this.onStopHandler.bind(this));\r\n        this.audioCtx.onEnded(this.onEndedHandler.bind(this));\r\n        this.audioCtx.onTimeUpdate(this.onTimeUpdateHandler.bind(this));\r\n        this.audioCtx.onError(this.onErrorHandler.bind(this));\r\n        //fix: 修复iOS原生音频切换不起作用\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n        this.appCheckReplay();\r\n    }\r\n    //检测on off的参数\r\n    checkEventParams(event, action, fn) {\r\n        if (zaudioCbNameArr.indexOf(event) < 0) {\r\n            console.error(`参数${event}错误, 必须为${zaudioCbNameArr.join(\" | \")}中某一项`);\r\n            return false;\r\n        }\r\n        if (typeof action !== \"string\" && typeof action !== \"symbol\") {\r\n            console.error(`参数${action}错误, 参数必须为string或symbol类型`);\r\n            return false;\r\n        }\r\n        if (fn && typeof fn !== \"function\") {\r\n            console.error(\"fn参数错误\");\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n    /**\r\n     * @description 回调中卸载业务事件\r\n     * @param {<zaudioCbName>}   event     回调名称枚举值\r\n     * @param {Sting|Symbol}         action    业务函数名,用于区分不同业务\r\n     * @returns undefined\r\n     * **/\r\n    off(event, action) {\r\n        if (!this.checkEventParams(event, action))\r\n            return;\r\n        super.off(event, action);\r\n    }\r\n    /**\r\n     * @description 回调中注册业务事件\r\n     * @param {<zaudioCbName>}        event     回调名称枚举值\r\n     * @param {Sting|Symbol}              action    业务函数名,用于区分不同业务\r\n     * @param {function(object|string|number|undefined):undefined}      fn      业务函数, 参数或为音频状态\r\n     * @returns undefined\r\n     * **/\r\n    on(event, action, fn) {\r\n        if (!this.checkEventParams(event, action))\r\n            return;\r\n        super.on(event, action, fn);\r\n    }\r\n    /**\r\n     * @description 订阅触发音频回调\r\n     * @param {<zaudioCbName>}        event      回调名称枚举值,具体看zaudioCbName\r\n     * @param {object|string|number|undefined}     data        订阅触发回调时,传的音频属性\r\n     * @returns undefined\r\n     * **/\r\n    emit(event, data) {\r\n        super.emit(event, data);\r\n    }\r\n    commit(action, data) {\r\n        typeof this[action] === \"function\" && this[action](data);\r\n    }\r\n    onWaitingHandler() {\r\n        this.commit(\"setLoading\", true);\r\n        this.emit(zaudioCbName.onWaiting, true);\r\n        this.syncStateEmit();\r\n    }\r\n    onCanplayHandler() {\r\n        this.emit(zaudioCbName.onCanplay, this.playinfo);\r\n        this.commit(\"setLoading\", false);\r\n        this.syncStateEmit();\r\n    }\r\n    onPlayHandler() {\r\n\r\n\r\n\r\n\r\n\r\n\r\n        this.commit(\"setPause\", false);\r\n        this.commit(\"setUnnormalPause\", false);\r\n    }\r\n    onPauseHandler() {\r\n        this.commit(\"setPause\", true);\r\n        this.emit(zaudioCbName.onPause);\r\n        this.syncStateEmit();\r\n    }\r\n    onStopHandler() {\r\n        this.commit(\"setPause\", true);\r\n        this.emit(zaudioCbName.onStop);\r\n        this.syncStateEmit();\r\n    }\r\n    onEndedHandler() {\r\n        this.commit(\"setPause\", true);\r\n        this.audioCtx.startTime = 0;\r\n        this.commit(\"setPlayinfo\", {\r\n            current: \"00:00\",\r\n            current_value: 0,\r\n            src: \"\",\r\n        });\r\n        this.emit(zaudioCbName.onEnded);\r\n        this.syncStateEmit();\r\n        //续播\r\n        if (this.continuePlay) {\r\n            this.changeplay(1);\r\n        }\r\n        else {\r\n            let nextkey = this.getNextKey(1);\r\n            this.commit(\"setRender\", nextkey);\r\n        }\r\n    }\r\n    onTimeUpdateHandler() {\r\n        if (this.renderIsPlay) {\r\n            //fix: 解决播放进度大于总进度问题\r\n            let currentTime = this.audioCtx.currentTime > this.audioCtx.duration\r\n                ? this.audioCtx.duration\r\n                : this.audioCtx.currentTime;\r\n            this.commit(\"setPlayinfo\", {\r\n                current: util_1.formatSeconds(currentTime),\r\n                current_value: currentTime,\r\n            });\r\n\r\n            //fix: 解决小程序与h5无法获取总进度的问题\r\n            if (this.audioCtx.duration != this.playinfo.duration_value) {\r\n                this.commit(\"setPlayinfo\", {\r\n                    duration: util_1.formatSeconds(this.audioCtx.duration),\r\n                    duration_value: this.audioCtx.duration,\r\n                });\r\n            }\r\n\r\n        }\r\n        this.throttlePlaying();\r\n    }\r\n    onErrorHandler() {\r\n        this.commit(\"setPause\", true);\r\n        this.commit(\"setRender\", {\r\n            src: \"\",\r\n            title: \"\",\r\n            singer: \"\",\r\n            coverImgUrl: \"\",\r\n        });\r\n        this.commit(\"setPlayinfo\", {\r\n            current: \"00:00\",\r\n            current_value: 0,\r\n            duration: \"00:00\",\r\n            duration_value: 0,\r\n            title: \"\",\r\n            src: \"\",\r\n        });\r\n        this.emit(zaudioCbName.onError);\r\n        this.syncStateEmit();\r\n        if (this.continuePlay) {\r\n            this.changeplay(1);\r\n        }\r\n    }\r\n    /**\r\n     * @description 实时渲染当前状态\r\n     * @returns undefined\r\n     * **/\r\n    syncRender() {\r\n        this.setRender(this.playIndex);\r\n    }\r\n    /**\r\n     * @description 注册一个实时获取ZAudio属性的方法\r\n     * @param {String}        action      自定义业务名\r\n     * @param {Funtion}     fn        实时获取ZAudio属性回调\r\n     * @returns undefined\r\n     * **/\r\n    syncStateOn(action, fn) {\r\n        typeof fn === \"function\" && this.on(zaudioCbName.syncStateOn, action, fn);\r\n    }\r\n    /**\r\n     * @description 卸载实时获取ZAudio属性的方法\r\n     * @param {String}        action      自定义业务名\r\n     * @returns undefined\r\n     * **/\r\n    syncStateOff(action) {\r\n        this.off(zaudioCbName.syncStateOn, action);\r\n    }\r\n    /**\r\n     * @description 订阅实时获取ZAudio属性的方法\r\n     * @returns undefined\r\n     * **/\r\n    syncStateEmit() {\r\n        this.emit(zaudioCbName.syncStateOn, {\r\n            renderIndex: this.renderIndex,\r\n            audiolist: this.audiolist,\r\n            renderinfo: this.renderinfo,\r\n            playinfo: this.playinfo,\r\n            paused: this.paused,\r\n            playIndex: this.playIndex,\r\n            renderIsPlay: this.renderIsPlay,\r\n            loading: this.loading,\r\n        });\r\n    }\r\n    /**\r\n     * @description 跳转播放\r\n     * @param {Number}        value      跳转位置\r\n     * @returns undefined\r\n     * **/\r\n    seek(value) {\r\n        let val = value > this.audioCtx.duration ? this.audioCtx.duration : value;\r\n        this.audioCtx.seek(val);\r\n        this.commit(\"setPlayinfo\", {\r\n            current: util_1.formatSeconds(val),\r\n            current_value: val,\r\n        });\r\n        // setTimeout(() => {\r\n        //   this.emit(zaudioCbName.seek, this.playinfo.current);\r\n        // }, 0);\r\n        this.emit(zaudioCbName.seek, this.playinfo.current);\r\n    }\r\n    /**\r\n     * @description 快进\r\n     * @param {Number}        value      跳转位置\r\n     * @returns undefined\r\n     * **/\r\n    stepPlay(value) {\r\n        if (this.renderIsPlay) {\r\n            let pos = this.playinfo.current_value + value;\r\n            this.seek(pos);\r\n        }\r\n    }\r\n    /**\r\n     * @description 获取下一首歌曲索引(用于渲染和播放)\r\n     * @param {Number}        count     切换数量\r\n     * @returns number\r\n     * **/\r\n    getNextKey(count) {\r\n        let nextkey = this.renderIndex;\r\n        nextkey += count;\r\n        nextkey =\r\n            nextkey < 0\r\n                ? this.audiolist.length - 1\r\n                : nextkey > this.audiolist.length - 1\r\n                    ? 0\r\n                    : nextkey;\r\n        return nextkey;\r\n    }\r\n    /**\r\n     * @description 切歌\r\n     * @param {Number}        count      数量\r\n     * @returns undefined\r\n     * **/\r\n    changeplay(count) {\r\n        let nextkey = this.getNextKey(count);\r\n        this.commit(\"setPause\", true);\r\n        this.operate(nextkey);\r\n    }\r\n    /**\r\n     * @description 手动播放或暂停, 并渲染对应的数据\r\n     * @param {Number|String|<audioInfo>|undefined}        key      索引或音频对象\r\n     * @returns undefined\r\n     * **/\r\n    operate(key) {\r\n        key !== undefined && this.commit(\"setRender\", key);\r\n        this.operation();\r\n    }\r\n    /**\r\n     * @description 强制暂停播放\r\n     * @returns undefined\r\n     * **/\r\n    stop() {\r\n        this.audioCtx.pause();\r\n        this.commit(\"setPause\", true);\r\n        this.commit(\"setUnnormalPause\", true);\r\n        this.emit(zaudioCbName.onStop);\r\n    }\r\n    //播放,暂停事件判断,\r\n    //播放数据与渲染数据相同时: 播放->暂停, 暂停->播放\r\n    //播放数据与渲染数据不相同时: 播放渲染音频\r\n    operation() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const { duration, current, duration_value, current_value, src, } = this.playinfo;\r\n            const { src: renderSrc, title: renderTitle, singer: renderSinger, coverImgUrl: renderCoverImgUrl, } = this.renderinfo;\r\n            let renderIsPlay = this.renderIsPlay;\r\n            let paused = this.paused;\r\n            if (!renderIsPlay) {\r\n                //渲染与播放地址 不同\r\n                this.audioCtx.src = renderSrc;\r\n                this.audioCtx.title = renderTitle;\r\n                this.audioCtx.singer = renderSinger;\r\n                this.audioCtx.coverImgUrl = renderCoverImgUrl || this.defaultCover;\r\n                this.audioCtx.startTime = 0;\r\n                this.audioCtx.seek(0);\r\n                this.audioCtx.play();\r\n                this.commit(\"setPause\", false);\r\n                this.commit(\"setPlayinfo\", {\r\n                    src: renderSrc,\r\n                    title: renderTitle,\r\n                    singer: renderSinger,\r\n                    coverImgUrl: renderCoverImgUrl,\r\n                });\r\n            }\r\n            else {\r\n                if (paused) {\r\n                    //渲染与播放地址相同\r\n                    this.audioCtx.play();\r\n                    this.audioCtx.startTime = current_value;\r\n                    // this.audioCtx.seek(current_value);\r\n                    this.commit(\"setPause\", false);\r\n                    this.commit(\"setPlayinfo\", {\r\n                        src: renderSrc,\r\n                        title: renderTitle,\r\n                        singer: renderSinger,\r\n                        coverImgUrl: renderCoverImgUrl,\r\n                    });\r\n                }\r\n                else {\r\n                    this.audioCtx.pause();\r\n                    this.commit(\"setPause\", true);\r\n                    this.commit(\"setUnnormalPause\", true);\r\n                }\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * @description 覆盖音频\r\n     * @param {Array<audio>} data 音频数组\r\n     * @returns undefined\r\n     * **/\r\n    setAudio(data) {\r\n        this.audiolist = [...data];\r\n        this.emit(zaudioCbName.setAudio, this.audiolist);\r\n        this.syncStateEmit();\r\n    }\r\n    /**\r\n     * @description 添加音频\r\n     * @param {Array<audio>} data 音频数组\r\n     * @returns undefined\r\n     * **/\r\n    updateAudio(data) {\r\n        this.audiolist.push(...data);\r\n        this.emit(zaudioCbName.updateAudio, this.audiolist);\r\n        this.syncStateEmit();\r\n    }\r\n    /**\r\n     * @description 设置当前播放信息\r\n     * @param {<audioInfo>} data 音频对象\r\n     * @returns undefined\r\n     * **/\r\n    setPlayinfo(data) {\r\n        for (let i in data) {\r\n            this.playinfo[i] = data[i];\r\n        }\r\n    }\r\n    /**\r\n     * @description 设置暂停状态\r\n     * @param {boolean} data 布尔值\r\n     * @returns undefined\r\n     * **/\r\n    setPause(data) {\r\n        this.paused = data;\r\n    }\r\n    /**\r\n     * @description 设置loading\r\n     * @param {boolean} data 布尔值\r\n     * @returns undefined\r\n     * **/\r\n    setLoading(data) {\r\n        this.loading = data;\r\n    }\r\n    /**\r\n     * @description 设置通话时暂停状态\r\n     * @param {boolean} data 布尔值\r\n     * @returns undefined\r\n     * **/\r\n    setUnnormalPause(data) {\r\n        this.uPause = data;\r\n    }\r\n    /**\r\n     * @description 设置渲染\r\n     * @param {number | string | audioInfo} data 索引或渲染信息\r\n     * @returns undefined\r\n     * **/\r\n    setRender(data) {\r\n        if (this.audiolist.length == 0)\r\n            return;\r\n        if (typeof data === \"number\" || typeof data === \"string\") {\r\n            this.renderIndex = typeof data === \"string\" ? parseInt(data) : data;\r\n            this.renderinfo = {\r\n                src: this.audiolist[this.renderIndex].src,\r\n                title: this.audiolist[this.renderIndex].title,\r\n                singer: this.audiolist[this.renderIndex].singer,\r\n                coverImgUrl: this.audiolist[this.renderIndex].coverImgUrl,\r\n                current: \"00:00\",\r\n                duration: \"00:00\",\r\n                current_value: 0,\r\n                duration_value: 100,\r\n            };\r\n        }\r\n        else {\r\n            this.renderinfo = data;\r\n            let renderIndex = this.audiolist.findIndex((i) => i.src == data.src);\r\n            if (renderIndex >= 0) {\r\n                this.renderIndex = renderIndex;\r\n            }\r\n        }\r\n        this.syncStateEmit();\r\n    }\r\n    //当前索引\r\n    get playIndex() {\r\n        let index = this.audiolist.findIndex((i) => i.src == this.playinfo.src);\r\n        return index <= 0 ? 0 : index;\r\n    }\r\n    //渲染与播放是否一致\r\n    get renderIsPlay() {\r\n        return this.renderinfo.src == this.playinfo.src;\r\n    }\r\n    //app端判断电话来电后, 音频意外中断之后的继续播放\r\n    appCheckReplay() {\r\n        let _t = this;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    }\r\n}\r\nexports.default = ZAudio;\r\nZAudio.version = \"2.2.51\";\r\n", "import ZAudio from \"./dist/zaudio.js\";\nexport default ZAudio"],
  "mappings": "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",
  "names": ["zaudioCbName", "ZAudio", "ZAudio"]
}
